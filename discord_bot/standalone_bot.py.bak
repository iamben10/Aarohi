import discord
from discord.ext import commands
import json
import logging
import os
from datetime import datetime
import random

# This is a COMPLETELY STANDALONE version of your bot
# It loads your config and cogs, but implements a clean !guide command
# that won't conflict with the existing help system

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("standalone_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("discord_bot")

print("\n" + "=" * 60)
print("AAROHI BOT - GUIDE COMMAND VERSION")
print("=" * 60)
print("\nThis version of Aarohi uses a !guide command instead of !help")
print("to show the clean Aarohi Commands section without any conflicts.")
print("\nUsers can type !guide to see the clean command list.\n")

# Load configuration
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
        PREFIX = config['prefix']
        TOKEN = config['token']
    print(f"‚úÖ Loaded configuration with prefix: {PREFIX}")
except FileNotFoundError:
    print("‚ùå Config file not found. Creating a default one...")
    PREFIX = "!"
    TOKEN = input("Please enter your bot token: ")
    config = {"prefix": PREFIX, "token": TOKEN}
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
    print("‚úÖ Created default config.json")

# Initialize bot with intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

# Create bot with normal help command (we'll use guide instead)
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

# Store for every message that's been processed for guide
processed_guide_messages = set()

# Event: Bot is ready
@bot.event
async def on_ready():
    logger.info(f'{bot.user.name} has connected to Discord!')
    print(f"\n‚úÖ {bot.user.name} is now online with the !guide command!")
    
    # Set start time for uptime tracking
    bot.start_time = datetime.utcnow()
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening, 
        name=f"{PREFIX}guide"
    ))
    
    # Attempt to load cogs
    print("\nLoading cogs...")
    if os.path.exists('./cogs'):
        for filename in os.listdir('./cogs'):
            if filename.endswith('.py'):
                try:
                    await bot.load_extension(f'cogs.{filename[:-3]}')
                    print(f"‚úÖ Loaded extension: {filename}")
                except Exception as e:
                    print(f"‚ùå Failed to load extension {filename}: {e}")
    else:
        print("‚ùå No cogs directory found")
    
    print(f"\nBot is fully ready - type {PREFIX}guide in Discord to see the clean commands list!")

# Event: Message received
@bot.event
async def on_message(message):
    # Don't respond to bot messages
    if message.author.bot:
        return
    
    # Check if this is a guide command
    content_lower = message.content.strip().lower()
    
    # FIRST check - is this a guide command?
    if content_lower == f"{PREFIX}guide" or content_lower == f"{PREFIX}guide ":
        # Store message ID to prevent duplicate processing
        if message.id in processed_guide_messages:
            return
        processed_guide_messages.add(message.id)
        
        # Create our custom guide embed
        embed = discord.Embed(
            title="Aarohi Commands",
            description="Hey! I'm Aarohi, here to help you stay productive and have some fun.",
            color=discord.Color.purple()
        )

        # Basic Commands
        embed.add_field(
            name="üìå Basic Commands",
            value=(
                f"`{PREFIX}ping` - Check if I'm online\n"
                f"`{PREFIX}guide` - Display this help message"
            ),
            inline=False
        )

        # Productivity Tools
        embed.add_field(
            name="‚è±Ô∏è Productivity Tools",
            value=(
                f"`{PREFIX}pomodoro` - Start a focus session\n"
                f"`{PREFIX}todo` - Manage your to-do list\n"
                f"`{PREFIX}alarm` - Set or view alarms\n"
                f"`{PREFIX}focus` - Enter distraction-free mode"
            ),
            inline=False
        )

        # Personalization
        embed.add_field(
            name="‚ú® Personalization",
            value=(
                f"`{PREFIX}profile` - View or update your profile\n"
                f"`{PREFIX}mood` - Track your emotional state\n"
                f"`{PREFIX}resources` - Get helpful resources\n"
                f"`{PREFIX}quote` - Get an inspirational quote"
            ),
            inline=False
        )

        # Footer
        embed.set_footer(text=f"Type {PREFIX}guide <command> for more details")

        # Send ONLY this embed, nothing else
        await message.channel.send(embed=embed)
        return  # Don't process any further
    
    # Handle guide with specific command
    elif content_lower.startswith(f"{PREFIX}guide "):
        # Store message ID to prevent duplicate processing
        if message.id in processed_guide_messages:
            return  
        processed_guide_messages.add(message.id)
        
        cmd = content_lower.split(" ")[1]
        await message.channel.send(f"I don't have specific information for `{cmd}`. Try `{PREFIX}guide` to see all available commands.")
        return
    
    # For all other messages, process commands normally
    await bot.process_commands(message)

# Add a dedicated guide command
@bot.command(name="guide")
async def guide(ctx):
    """Display the clean Aarohi Commands guide"""
    # Create our guide embed
    embed = discord.Embed(
        title="Aarohi Commands",
        description="Hey! I'm Aarohi, here to help you stay productive and have some fun.",
        color=discord.Color.purple()
    )

    # Basic Commands
    embed.add_field(
        name="üìå Basic Commands",
        value=(
            f"`{PREFIX}ping` - Check if I'm online\n"
            f"`{PREFIX}guide` - Display this help message"
        ),
        inline=False
    )

    # Productivity Tools
    embed.add_field(
        name="‚è±Ô∏è Productivity Tools",
        value=(
            f"`{PREFIX}pomodoro` - Start a focus session\n"
            f"`{PREFIX}todo` - Manage your to-do list\n"
            f"`{PREFIX}alarm` - Set or view alarms\n"
            f"`{PREFIX}focus` - Enter distraction-free mode"
        ),
        inline=False
    )

    # Personalization
    embed.add_field(
        name="‚ú® Personalization",
        value=(
            f"`{PREFIX}profile` - View or update your profile\n"
            f"`{PREFIX}mood` - Track your emotional state\n"
            f"`{PREFIX}resources` - Get helpful resources\n"
            f"`{PREFIX}quote` - Get an inspirational quote"
        ),
        inline=False
    )

    # Footer
    embed.set_footer(text=f"Type {PREFIX}guide <command> for more details")
    
    await ctx.send(embed=embed)

# Simple ping command to check latency
@bot.command(name="ping")
async def ping(ctx):
    # Calculate latency
    latency = round(bot.latency * 1000)
    
    # Create a simple response
    embed = discord.Embed(
        title="Pong! üèì",
        description=f"Response time: **{latency}ms**",
        color=discord.Color.green()
    )
    
    # Send the response
    await ctx.send(embed=embed)

# Run the bot
if __name__ == "__main__":
    print("\n" + "=" * 60)
    print(f"Starting Aarohi with {PREFIX}guide command...")
    print("=" * 60 + "\n")
    try:
        bot.run(TOKEN, log_handler=None)
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        print("\nIf there's an issue with the token, check your config.json file.")
        input("Press Enter to exit...") 